install.packages(c("bcdata", "exactextractr", "gdata", "igraph", "janitor", "plotKML", "rio", "rlist", "WriteXLS"))
pwd()
gwd()
getwd()
ls()
system(ls)
system('ls')
system('ls ../../')
system('ls ../../../')
system('ls ../../../../')
OutDir <- 'out'
SyncDir<-file.path('../../../../Sync')
#
FFHSpatialDir <- file.path(SyncDir,'Fish and Fish Habitat/Tier 1/Assessment/Final Package - 2020/Data')
source("header.R")
ESIDir
#Load ESI boundary
ESIin <- read_sf(file.path(ESIDir,'Skeena_ESI_Boundary/'), layer = "SSAF_Boundary_Nov2017") %>%
st_transform(3005)
file.path(ESIDir,'Skeena_ESI_Boundary/')
system('ls ../../../../Sync/Data Management/Data/Skeena_ESI_Boundary/')
#Load ESI boundary
ESIin <- read_sf(file.path(ESIDir,'Skeena_ESI_Boundary'), layer = "SSAF_Boundary_Nov2017") %>%
st_transform(3005)
ESIin <- read_sf(file.path(ESIDir,'Skeena_ESI_Boundary'), layer = "ESI_Skeena_Study_Area_Nov2017")
ESIin
ESIin <- read_sf(file.path(ESIDir,'Skeena_ESI_Boundary'), layer = "ESI_Skeena_Study_Area_Nov2017") %>%
st_transform(3005)
ESI <- st_cast(ESIin, "MULTIPOLYGON")
saveRDS(ESI, file = ESI_file)
ESI_file <- file.path("tmp/ESI")
ESIin <- read_sf(file.path(ESIDir,'Skeena_ESI_Boundary'), layer = "ESI_Skeena_Study_Area_Nov2017") %>%
st_transform(3005)
ESI <- st_cast(ESIin, "MULTIPOLYGON")
saveRDS(ESI, file = ESI_file)
Wshd <- get_layer("wsc_drainages", class = "sf") %>%
select(SUB_DRAINAGE_AREA_NAME, SUB_SUB_DRAINAGE_AREA_NAME) %>%
`st_crs<-`(3005) %>%
st_intersection(ESI)
saveRDS(Wshd, file = 'tmp/Wshd')
Wshd.dat<- Wshd %>%
st_drop_geometry() %>%
dplyr::select(SUB_DRAINAGE_AREA_NAME, SUB_SUB_DRAINAGE_AREA_NAME)
SkeenaE<-Wshd.dat %>%
dplyr::filter(SUB_SUB_DRAINAGE_AREA_NAME %in% c("Bulkley","Morice",'Babine')) %>%
mutate(MWshd='SkeenaE') %>%
dplyr::select(SUB_SUB_DRAINAGE_AREA_NAME, MWshd)
SkeenaW<-Wshd.dat %>%
dplyr::filter(SUB_SUB_DRAINAGE_AREA_NAME %in% c('Lower Skeena','Central Skeena','Upper Skeena','Headwaters Skeena','Finlay')) %>%
mutate(MWshd='SkeenaW') %>%
dplyr::select(SUB_SUB_DRAINAGE_AREA_NAME, MWshd)
Nechako<-Wshd.dat %>%
dplyr::filter(SUB_DRAINAGE_AREA_NAME %in% c('Nechako','Upper Fraser')) %>%
mutate(MWshd='Nechako') %>%
dplyr::select(SUB_SUB_DRAINAGE_AREA_NAME, MWshd)
Coastal<-Wshd.dat %>%
dplyr::filter(SUB_DRAINAGE_AREA_NAME %in% c('Central Coastal Waters of B.C.','Stikine - Coast')) %>%
mutate(MWshd='Coastal') %>%
dplyr::select(SUB_SUB_DRAINAGE_AREA_NAME, MWshd)
Nass<-Wshd.dat %>%
dplyr::filter(SUB_DRAINAGE_AREA_NAME == 'Nass - Coast') %>%
mutate(MWshd='Nass') %>%
dplyr::select(SUB_SUB_DRAINAGE_AREA_NAME, MWshd)
Wshd_LUT<-rbind(Coastal, Nass, SkeenaW, SkeenaE,Nechako)
WetWshd<-Wshd %>%
left_join(Wshd_LUT, by='SUB_SUB_DRAINAGE_AREA_NAME') %>%
group_by(MWshd) %>%
dplyr::summarise()
write_sf(WetWshd, file.path(spatialOutDir,"WetWshd.gpkg"))
WetWshd<-Wshd %>%
left_join(Wshd_LUT, by='SUB_SUB_DRAINAGE_AREA_NAME') %>%
group_by(MWshd) %>%
dplyr::summarise()
write_sf(WetWshd, file.path(spatialOutDir,"WetWshd.gpkg"))
#Check data
mapview(WetWshd) + mapview(Wshd) + mapview(WetWshd) + mapview(ESI)
FFHSpatialDir
# Read in Watershed indicator data
Wshd_gdb <- list.files(file.path(FFHSpatialDir), pattern = ".gdb", full.names = TRUE)[1]
Wshd_gdb
Wshd_list <- st_layers(Wshd_gdb)
Wshd_list
FFH_Wshd<-read_sf(Wshd_gdb, layer = "SSAF_CEF_Aquatics_Indicators_2018_200428_200914")
View(FFH_Wshd)
FFH_Wshd
FFH_Wshd<-read_sf(Wshd_gdb, layer = "SSAF_CEF_Aquatics_Indicators_2018_200428_200914") %>%
st_transform(3005)
class(FFH_Wshd)
FFH_XY <- st_centroid(FFH_Watershed)
FFH_Watershed<-read_sf(Wshd_gdb, layer = "SSAF_CEF_Aquatics_Indicators_2018_200428_200914") %>%
st_transform(3005)
#Generate an ESI Wetlands point coverage if havent been done
Pt_file <- file.path("tmp/waterpt")
FFH_XY <- st_centroid(FFH_Watershed)
ffhpt <- st_coordinates(FFH_XY) %>%
cbind(ffhpt) %>%
st_drop_geometry()
ffhpt <- st_coordinates(FFH_XY) %>%
cbind() %>%
st_drop_geometry()
class(FFH_XY)
ffhpt <- st_coordinates(FFH_XY)
FFH_XY <- st_centroid(FFH_Watershed)
ffhpt <- st_coordinates(FFH_XY)
ffhpt <- FFH_XY %>%
cbind(ffhpt) %>%
st_drop_geometry()
waterpt <- st_as_sf(ffhpt, coords= c("X","Y"), crs = 3005) %>%
st_intersection(AOI.spatial)
waterpt <- waterpt %>%
mutate(wet_id=as.numeric(rownames(waterpt)))
# AOI for comparing watersheds to ESI full area
AOI.spatial <- ESI
waterpt <- st_as_sf(ffhpt, coords= c("X","Y"), crs = 3005) %>%
st_intersection(AOI.spatial)
waterpt <- waterpt %>%
mutate(wet_id=as.numeric(rownames(waterpt)))
#st_crs(waterpt)<-3005
saveRDS(waterpt, file = Pt_file)
write_sf(waterpt, file.path(spatialOutDir,"FFH_waterpt.gpkg"))
ESIDir <- file.path(SyncDir,'PT and STC\Science and Technical Committee (STC)\Base Information\Data')
ESIDir <- file.path(SyncDir,'PT and STC/Science and Technical Committee (STC)/Base Information\Data')
ESIDir <- file.path(SyncDir,'PT and STC/Science and Technical Committee (STC)/Base Information/Data')
#Add watersheds to wetlands
#use centre point of wetland and assign each to a major watershed
#See if it is already done - computationally intensive
ffh_file <- file.path("tmp/ffh.spatial")
Wshd_pts <-st_intersection(waterpt, FFH_Watershed) %>%
st_drop_geometry()
#Add watersheds to wetlands
#use centre point of wetland and assign each to a major watershed
#See if it is already done - computationally intensive
ffh_file <- file.path("tmp/ffh.spatial")
FFH_Watershed<-read_sf(Wshd_gdb, layer = "SSAF_CEF_Aquatics_Indicators_2018_200428_200914") %>%
st_transform(3005) %>%
st_intersection(AOI.spatial)
FFH_Watershed<-read_sf(Wshd_gdb, layer = "SSAF_CEF_Aquatics_Indicators_2018_200428_200914") %>%
st_transform(3005) %>%
st_buffer(0)
FFH_Watershed<-read_sf(Wshd_gdb, layer = "SSAF_CEF_Aquatics_Indicators_2018_200428_200914") %>%
st_transform(3005) %>%
st_buffer(0) %>%
st_intersection(AOI.spatial)
Wshd_pts <-st_intersection(waterpt, FFH_Watershed) %>%
st_drop_geometry()
View(Wshd_pts)
colnames(Wshd_pts)
MajorWshd<-Wshd %>%
left_join(Wshd_LUT, by='SUB_SUB_DRAINAGE_AREA_NAME') %>%
group_by(MWshd) %>%
dplyr::summarise()
write_sf(MajorWshd, file.path(spatialOutDir,"MajorWshd.gpkg"))
Wshd_pts <-st_intersection(waterpt, MajorWshd) %>%
st_drop_geometry()
colnames(Wshd_ptsd)
colnames(Wshd_pts)
FFH_Watershed<-FFH_Watershed %>%
left_join(Wshd_pts, by='WATERSHED_FEATURE_ID')
#Set NULL to 0
FFH_Watershed[is.na(FFH_Watershed)] <- 0
colnamesWshd_pts <-st_intersection(waterpt, MajorWshd) %>%
st_drop_geometry() %>%
dplyr::select('WATERSHED_FEATURE_ID', 'MWshd')
#join back to FFH_Watershed
FFH_Watershed<-FFH_Watershed %>%
left_join(Wshd_pts, by='WATERSHED_FEATURE_ID')
FFH_Watershed[is.na(FFH_Watershed)] <- 0
#Add watersheds to wetlands
#use centre point of wetland and assign each to a major watershed
#See if it is already done - computationally intensive
ffh_file <- file.path("tmp/ffh.spatial")
saveRDS(FFH_Watershed, file = ffh_file)
ffh.spatial<-readRDS(file = ffh_file)
table(ffh.spatial$RdsStrmXing_Density_net)
range(ffh.spatial$RdsStrmXing_Density_net)
range(ffh.spatial$Rd_Density_net)
max(ffh.spatial$Rd_Density_net)
View(ffh.spatial)
colnames(ffh.spatial)
colnames(FFH_Watershed)
colnames(waterpt)
colnames(Wshd_pts)
Wshd_pts <-st_intersection(waterpt, MajorWshd) %>%
st_drop_geometry() %>%
dplyr::select('WATERSHED_FEATURE_ID', 'MWshd')
FFH_Watershed<-read_sf(Wshd_gdb, layer = "SSAF_CEF_Aquatics_Indicators_2018_200428_200914") %>%
st_transform(3005) %>%
st_buffer(0) %>% #fix for self-intersection issues
st_intersection(AOI.spatial)
ffh.spatial<-FFH_Watershed %>%
left_join(Wshd_pts, by='WATERSHED_FEATURE_ID')
colnames(ffh.spatial)
saveRDS(ffh.spatial, file = ffh_file)
range(ffh.spatial$RdsStrmXing_Density_net)
range(ffh.spatial$ECA_Final_PCNT)
ffh.spatial<-ffh.spatial %>%
mutate(ECA_Final_PCNT=ifelse(ECA_Final_PCNT>100,0,ECA_Final_PCNT))
nrow(ffh.spatial)
nrow(unique(ffh.spatial$WATERSHED_FEATURE_ID))
length(unique(ffh.spatial$WATERSHED_FEATURE_ID))
Watersheds_Context<-ffh.spatial
write.table(Watersheds_Context,file = file.path(dataOutDir,"Watersheds_Context.csv"),append = FALSE, quote = TRUE, row.names = FALSE, col.names = TRUE, sep=",")
WshdFn <- function(df, Wshd){
df %>%
dplyr::filter(df$MWshd==Wshd) %>%
dplyr::select(MWshd, WATERSHED_FEATURE_ID, all_of(IndicatorsW)) %>%
write_csv(paste(dataOutDir,"/Watersheds_",Wshd,".csv", sep=''))
}
dfrun<-lapply(Wshd.context[], function(i) WshdFn(Watersheds_Context, i))
#Generate Watershed units for first 3 watershed indicators
Watersheds_Context<-ffh.spatial
dfrun<-lapply(Wshd.context[], function(i) WshdFn(Watersheds_Context, i))
Wshd.context<-c('Nechako','SkeenaE','SkeenaW','Nass','Coastal')
dfrun<-lapply(Wshd.context[], function(i) WshdFn(Watersheds_Context, i))
#Indiators selected for summarizing
IndicatorsW<-c('ECA_Final_PCNT','RdsStrmXing_Density_net', 'Rd_Density_net')
dfrun<-lapply(Wshd.context[], function(i) WshdFn(Watersheds_Context, i))
Watersheds_Context<-ffh.spatial %>%
st_drop_geometry()
write.table(Watersheds_Context,file = file.path(dataOutDir,"Watersheds_Context.csv"),append = FALSE, quote = TRUE, row.names = FALSE, col.names = TRUE, sep=",")
dfrun<-lapply(Wshd.context[], function(i) WshdFn(Watersheds_Context, i))
IndicatorsW
df<-Watersheds_Context[IndicatorsW]
View(df)
range(df)
lapply
lapply(Indicators_df, range)
Indicators_df<-Watersheds_Context[IndicatorsW]
lapply(Indicators_df, range)
Watersheds_Context<-ffh.spatial %>%
st_drop_geometry()
#Check continuous indicator distribution and clean up where needed
Indicators_df<-Watersheds_Context[IndicatorsW]
lapply(Indicators_df, range)
Watersheds_Context<-Watersheds_Context %>%
mutate(ECA_Final_PCNT=ifelse(ECA_Final_PCNT>100,0,ECA_Final_PCNT))
write.table(Watersheds_Context,file = file.path(dataOutDir,"Watersheds_Context.csv"),append = FALSE, quote = TRUE, row.names = FALSE, col.names = TRUE, sep=",")
#Loop through Watersheds, AOI and indicators and output analysis ready data sets
#Write a function to filter and output table for box plots
WshdFn <- function(df, Wshd){
df %>%
dplyr::filter(df$MWshd==Wshd) %>%
dplyr::select(MWshd, WATERSHED_FEATURE_ID, all_of(IndicatorsW)) %>%
write_csv(paste(dataOutDir,"/Watersheds_",Wshd,".csv", sep=''))
}
dfrun<-lapply(Wshd.context[], function(i) WshdFn(Watersheds_Context, i))
#Wshds used for analysis
Wshds.used <- subset(WetWshd, MWshd %in% Wshd.context)
nameWshd<-data.frame(Wshd_NAME=Wshds.used$MWshd)
AOI
AOI<-'SkeenaESI'
AOI.Name<-"Skeena ESI"
Wshd.name
nameWshd
AOI
Wshds.used
source(BoxFunction.R)
source('BoxFunction.R')
#source files for each panel - watersheds first
source("03_analysis_BoxPlots_2.R")
AOI
nameWshd[i,]
i<-1
nameWshd[i,]
Wshd.name <- nameWshd[i,]
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir)
dataOutDir
dir.data
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir)
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir)
Boxplots(AOI, Wshd.name, Wshd.name, 'figsOutDir', 'dataOutDir')
#source files for each panel - watersheds first
source("03_analysis_BoxPlots_2.R")
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir)
IndicatorsW
IndicatorsW_Label <- c('ECA','Roads Stream Xing Density','Road density')
Thresh <- c(c(15,20),c(.4,1.2))
Thres[[1]]
Thresh[[1]]
Thresh[1]
Thresh[,11]
Thresh[,1]
Thresh[1,]
list(list(15,20),list(.4,1.2))
Thresh <- list(list(15,20),list(.4,1.2))
Thresh[1]
Thresh[[1]]
Thresh <- c(list(15,20),list(.4,1.2))
Thresh[[1]]
Thresh <- list(c(15,20),c(.4,1.2))
Thresh[[1]]
j<-1
Inds<-Indicators[j]
Inds<-IndicatorsW[j]
Inds
Thresh
Thrsh <- Thresh[[j]]
Thrsh
IndUnits <- c('%','km/km2')
IndU <- IndUnits[j]
IndU
Ind<-IndicatorsW[j]
IndL<-IndicatorsW_Label[j]
Thrsh <- Thresh[[j]]
IndU <- IndUnits[j]
Ind
IndL
Thrsh
IndU
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir, Ind, IndL,Thrsh, IndU)
#source files for each panel
source("03_analysis_BoxPlots_2.R")
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir, Ind, IndL,Thrsh, IndU)
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir, Ind, IndL,Thrsh, IndU)
i
for (j in 1:nrow(IndicatorsW)) {
Ind<-IndicatorsW[j]
IndL<-IndicatorsW_Label[j]
Thrsh <- Thresh[[j]]
IndU <- IndUnits[j]
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir, Ind, IndL,Thrsh, IndU)
}
nrow(IndicatorsW)
IndicatorsW
for (j in 1:length(IndicatorsW)) {
Ind<-IndicatorsW[j]
IndL<-IndicatorsW_Label[j]
Thrsh <- Thresh[[j]]
IndU <- IndUnits[j]
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir, Ind, IndL,Thrsh, IndU)
}
j
IndicatorsW<-c('ECA_Final_PCNT', 'Rd_Density_net')
IndicatorsW_Label <- c('ECA','Road density')
IndUnits <- c('%','km/km2')
Thresh <- list(c(15,20),c(.4,1.2))
for (j in 1:length(IndicatorsW)) {
Ind<-IndicatorsW[j]
IndL<-IndicatorsW_Label[j]
Thrsh <- Thresh[[j]]
IndU <- IndUnits[j]
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir, Ind, IndL,Thrsh, IndU)
}
j
#source files for each panel
source("03_analysis_BoxPlots_2.R")
for (j in 1:length(IndicatorsW)) {
Ind<-IndicatorsW[j]
IndL<-IndicatorsW_Label[j]
Thrsh <- Thresh[[j]]
IndU <- IndUnits[j]
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir, Ind, IndL,Thrsh, IndU)
}
for (i in 1:nrow(nameWshd)) {
Wshd.name <- nameWshd[i,]
#Loop through each of the indicators
for (j in 1:length(IndicatorsW)) {
Ind<-IndicatorsW[j]
IndL<-IndicatorsW_Label[j]
Thrsh <- Thresh[[j]]
IndU <- IndUnits[j]
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir, Ind, IndL,Thrsh, IndU)
}
}
o
source("03_analysis_BoxPlots.R")
for (i in 1:nrow(nameWshd)) {
Wshd.name <- nameWshd[i,]
#Loop through each of the indicators
for (j in 1:length(IndicatorsW)) {
Ind<-IndicatorsW[j]
IndL<-IndicatorsW_Label[j]
Thrsh <- Thresh[[j]]
IndU <- IndUnits[j]
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir, Ind, IndL,Thrsh, IndU)
}
}
#Read or create LUTs
#eg.
#Aquatic_Life_Support	Aquatic_Life_Support_flag
#High	High
#Low	Low
#Medium	Medium
LUTexample<-read.table(Aquatic_Life_Support_LUT,file = file.path(SyncOutDir,"Aquatic_Life_Support_LUT.csv"))
SyncDir
#Read or create LUTs
#eg.
#Aquatic_Life_Support	Aquatic_Life_Support_flag
#High	High
#Low	Low
#Medium	Medium
LUTexample<-read.table(Aquatic_Life_Support_LUT,file = file.path(SyncDir,"Data Management/Data/Water/Aquatic_Life_Support_LUT.csv"))
#Read or create LUTs
#eg.
#Aquatic_Life_Support	Aquatic_Life_Support_flag
#High	High
#Low	Low
#Medium	Medium
LUTexample<-read.table(Aquatic_Life_Support_LUT,file = file.path(ESIDir,"/Water/Aquatic_Life_Support_LUT.csv"))
#Read or create LUTs
#eg.
#Aquatic_Life_Support	Aquatic_Life_Support_flag
#High	High
#Low	Low
#Medium	Medium
LUTexample<-read.table(Aquatic_Life_Support_LUT,file = file.path(ESIDir,"Water/Aquatic_Life_Support_LUT.csv"))
ESIDir <- file.path(SyncDir,'STC/Science and Technical Committee/Base Information/Data')
#Read or create LUTs
#eg.
#Aquatic_Life_Support	Aquatic_Life_Support_flag
#High	High
#Low	Low
#Medium	Medium
LUTexample<-read.table(Aquatic_Life_Support_LUT,file = file.path(ESIDir,"Water/Aquatic_Life_Support_LUT.csv"))
file.path(ESIDir,"Water/Aquatic_Life_Support_LUT.csv")
#Read or create LUTs
#eg.
#Aquatic_Life_Support	Aquatic_Life_Support_flag
#High	High
#Low	Low
#Medium	Medium
LUTexample<-read.table(Aquatic_Life_Support_LUT,file = file.path(ESIDir,"Water/Aquatic_Life_Support_LUT.csv"))
#Read or create LUTs
#eg.
#Aquatic_Life_Support	Aquatic_Life_Support_flag
#High	High
#Low	Low
#Medium	Medium
LUTexample<-read.table(Aquatic_Life_Support_LUT,file = file.path(ESIDir,"Water","Aquatic_Life_Support_LUT.csv"))
#Read or create LUTs
#eg.
#Aquatic_Life_Support	Aquatic_Life_Support_flag
#High	High
#Low	Low
#Medium	Medium
LUTexample<-read.table(file = file.path(ESIDir,"Water/Aquatic_Life_Support_LUT.csv"))
FFH_LUTs <- data.frame(read_xlsx(path=file.path(ESIDir,"Water/'FFH_LUTs.xlsx')),sheet='Aquatic_Life_Support_LUT'))
FFH_LUTs
#Load all the data
source("01_load.R")
#Clean data, select indicators set up fields for analysis
source("02_clean.R")
#Source boxplot function
source("03_analysis_BoxPlots.R")
#Do a loop for each Major Watershed
for (i in 1:nrow(nameWshd)) {
Wshd.name <- nameWshd[i,]
#Loop through each of the indicators and generate box plot
for (j in 1:length(IndicatorsW)) {
Ind<-IndicatorsW[j]
IndL<-IndicatorsW_Label[j]
Thrsh <- Thresh[[j]]
IndU <- IndUnits[j]
Boxplots(AOI, Wshd.name, Wshd.name, figsOutDir, dataOutDir, Ind, IndL,Thrsh, IndU)
}
}
FFH_LUTs <- data.frame(read_xlsx(path=file.path(ESIDir,'Water/FFH_LUTs.xlsx')),sheet='Aquatic_Life_Support_LUT'))
FFH_LUTs <- data.frame(read_xlsx(path=file.path(ESIDir,'Water/FFH_LUTs.xlsx')),sheet='Aquatic_Life_Support_LUT')
View(FFH_LUTs)
FFH_LUTs <- data.frame(read_xlsx(path=file.path(ESIDir,'Water/FFH_LUTs.xlsx')))
View(FFH_LUTs)
#Read spreadsheet sheets from FFH_LUTs.xlsx
LUT_In<- excel_sheets(file.path(ESIDir,'Water/FFH_LUTs.xlsx.xlsx'))
#Read spreadsheet sheets from FFH_LUTs.xlsx
LUT_In<- excel_sheets(file.path(ESIDir,'Water/FFH_LUTs.xlsx'))
LUT_In
#Subsequent sheets are veg plots
x<-LUT_In[2:length(LUT_In)]
x
#Subsequent sheets are veg plots
x<-LUT_In[1:length(LUT_In)]
x
WetList<-lapply(x,function(x) {
read_excel(file.path(file.path(ESIDir,'Water/FFH_LUTs.xlsx'), sheet=x))
})
names(WetList) <- x
x<-LUT_In[1:length(LUT_In)]
WetList<-lapply(x,function(x) {
read_excel(file.path(ESIDir,'Water/FFH_LUTs.xlsx'), sheet=x)
})
names(WetList) <- x
names(WetList)
WetList
WetList[1]
WetList[[1]]
LUT_In<- excel_sheets(file.path(ESIDir,'Water/FFH_LUTs.xlsx'))
#Subsequent sheets are veg plots
x<-LUT_In[1:length(LUT_In)]
LUT_List<-lapply(x,function(x) {
read_excel(file.path(ESIDir,'Water/FFH_LUTs.xlsx'), sheet=x)
})
names(LUT_List) <- x
LUT_List[[1]]
#Read spreadsheet names from FFH_LUTs.xlsx
LUT_In<- excel_sheets(file.path(ESIDir,'Water/FFH_LUTs.xlsx'))
LUT_In
#Subsequent sheets are veg plots
x<-LUT_In[1:length(LUT_In)]
x
names(LUT_List)
LUT_In<- excel_sheets(file.path(ESIDir,'Water/FFH_LUTs.xlsx'))
#Subsequent sheets are veg plots
x<-LUT_In[1:length(LUT_In)]
LUT_List<-lapply(x,function(x) {
read_excel(file.path(ESIDir,'Water/FFH_LUTs.xlsx'), sheet=x)
})
names(LUT_List) <- x
LUT_List[[1]]
LUT_List[[2]]
